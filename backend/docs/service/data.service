# DataService 設計書

## 1. 概要

`DataService` は、楽曲データの取得と処理 (データベースへの保存) を担当する NestJS のサービスです。`DataController` から呼び出され、HTML ファイルからのデータ抽出、および Prisma を使用したデータベース操作を行います。

## 2. 依存関係

*   **`@nestjs/common`:** NestJS のコアモジュール ( `@Injectable` デコレータなど)。
*   **`fs`:** Node.js のファイルシステムモジュール。HTML ファイルの読み込みに使用。
*   **`path`:** Node.js のパス操作モジュール。ファイルパスの生成に使用。
*   **`node-html-parser`:** HTML をパースし、DOM 操作を行うためのライブラリ。
*   **`PrismaService`:** Prisma クライアントのインスタンス ( データベースへの接続、クエリ実行に使用)。
*   **`SongData`:** 楽曲データの型定義 ( `./types/song-data` )。
*   **`extractTypeFromHtml`:** HTML から楽曲データの種類 (`old` または `new`) を抽出するユーティリティ関数 ( `./utils` )。

## 3. メソッド

### 3.1. `getData(type: 'old' | 'new'): Promise<SongData[]>`

*   **概要:** 指定された種別 (`old` または `new`) の楽曲データを、HTML ファイルから読み込み、`SongData` オブジェクトの配列として返します。
*   **引数:**
    *   `type`: 楽曲データの種別 (`'old'` または `'new'`)
*   **戻り値:** `Promise<SongData[]>` ( `SongData` オブジェクトの配列)
*   **処理内容:**
    1.  `type` に基づいて、読み込む HTML ファイルのパスを生成。
    2.  `fs.readFileSync` で HTML ファイルを同期的に読み込む。
    3.  `node-html-parser` の `parse` 関数で HTML をパースし、DOM ツリーを構築。
    4.  `.skill_table_tb tbody tr` セレクタを使用して、テーブルの各行 (tr 要素) を取得。
    5.  `extractTypeFromHtml` ユーティリティ関数でHTMLからtypeを抽出。
    6.  `map` メソッドで各行を処理し、`SongData` オブジェクトに変換。
        *   曲名 (`title`): `.title .text_link` 要素のテキスト内容。
        *   難易度 (`difficulty`): `.music_seq_box .seq_icon:nth-child(2)` 要素のクラス名から `diff_` で始まる部分を抽出。
        *   達成率 (`achievementRate`): `.achive_cell` 要素のテキスト内容。
        *   スキル (`skill`): `.skill_cell` 要素のテキスト内容。
        *   タイプ (`type`): `extractTypeFromHtml`関数を用いてhtmlから抽出。
    7.  `SongData` オブジェクトの配列を返す。

### 3.2. `processData(type: 'old' | 'new'): Promise<void>`

*   **概要:** 指定された種別の楽曲データをデータベースに保存します。
*   **引数:**
    *   `type`: 楽曲データの種別 (`'old'` または `'new'`)
*   **戻り値:** `Promise<void>`
*   **処理内容:**
    1.  `getData(type)` を呼び出して、指定された種別の楽曲データを取得。
    2.  `prisma.$transaction` を使用して、データベーストランザクションを開始。
    3.  取得した楽曲データ配列を `map` で処理し、各 `SongData` オブジェクトに対して `this.prisma.song.create` を呼び出し、データベースに新しいレコードを作成。
    4.  トランザクションをコミット。

## 4. `DataService` (data.service.ts) ソースコード

```typescript
import { Injectable } from '@nestjs/common';
import * as fs from 'fs';
import * as path from 'path';
import { parse, HTMLElement } from 'node-html-parser';
import { PrismaService } from '../prisma.service';
import { SongData } from './types/song-data';
import { extractTypeFromHtml } from './utils'; // utils.ts からインポート

@Injectable()
export class DataService {
  constructor(private prisma: PrismaService) {}

  async getData(type: 'old' | 'new'): Promise<SongData[]> {
    const filePath = path.join(__dirname, `../../../../data/${type}.html`);
    const html = fs.readFileSync(filePath, 'utf-8');

    const root = parse(html);
    const tableRows = root.querySelectorAll('.skill_table_tb tbody tr');

    //  utils.ts の関数を使用
    const extractedType = extractTypeFromHtml(html);

    return tableRows.map((row: HTMLElement) => {
      const title =
        row.querySelector('.title .text_link')?.textContent?.trim() || '';
      const difficultyElement = row.querySelector(
        '.music_seq_box .seq_icon:nth-child(2)',
      );

      const difficultyClass = difficultyElement?.classNames
        .split(' ')
        .find((className: string) => className.startsWith('diff_'));

      const difficulty = difficultyClass
        ? difficultyClass.replace('diff_', '')
        : '';
      const achievementRate =
        row.querySelector('.achive_cell')?.textContent?.trim() || '';
      const skill = row.querySelector('.skill_cell')?.textContent?.trim() || '';

      return {
        title,
        difficulty,
        achievementRate,
        skill,
        type: extractedType, //  ここで使用
      };
    });
  }

  async processData(type: 'old' | 'new'): Promise<void> {
    const songsData = await this.getData(type);
    await this.prisma.$transaction(
      songsData.map((data) =>
        this.prisma.song.create({
          data: {
            title: data.title,
            difficulty: data.difficulty,
            achievementRate: data.achievementRate,
            skill: data.skill,
            type: data.type,
          },
        }),
      ),
    );
  }
}
